openapi: 3.0.3
info:
  title: Small Company API
  description: |
    This is a REST API for a small company to manage employees and customers.
    It includes functionalities such as login, registration, and CRUD operations for employees and customers.
  version: 1.0.11
servers:
  - url: http://localhost:8000/api
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserLogin:
      type: object
      properties:
        username:
          type: string
          example: presidentcompany
        password:
          type: string
          example: presidentcompany
    UserRegister:
      type: object
      properties:
        username:
          type: string
          example: stafftest
        password:
          type: string
          example: stafftest
        employeeNumber:
          type: integer
          example: 1006
    Employee:
      type: object
      properties:
        employeeNumber:
          type: integer
          example: 2025
        lastName:
          type: string
          example: Martinez
        firstName:
          type: string
          example: Sarah
        extension:
          type: string
          example: x8901
        email:
          type: string
          example: sarah.martinez@example.com
        officeCode:
          type: string
          example: 2
        reportsTo:
          type: integer
          example: 10034
        jobTitle:
          type: string
          example: Sales Rep
        role:
          type: integer
          example: 4
    Customer:
      type: object
      properties:
        customerNumber:
          type: integer
          example: 1995111
        customerName:
          type: string
          example: Acme Corp
        contactLastName:
          type: string
          example: Clark
        contactFirstName:
          type: string
          example: Robert
        phone:
          type: string
          example: +44-20-5555-0003
        addressLine1:
          type: string
          example: 321 Elm St
        addressLine2:
          type: string
          nullable: true
          example: null
        city:
          type: string
          example: London
        state:
          type: string
          example: England
        postalCode:
          type: string
          example: SW1A 1AA
        country:
          type: string
          example: UK
        salesRepEmployeeNumber:
          type: integer
          nullable: true
          example: 1004
        creditLimit:
          type: number
          format: float
          nullable: true
          example: 45000
    Log:
      type: object
      properties:
        id:
          type: string
          example: "66caf8ddc1c379d96be4cb93"
        message:
          type: string
          example: "System started"
        level:
          type: string
          example: "Info"
        timestamp:
          type: string
          example: "2024-08-23T12:00:00Z"
paths:
  /users/login:
    post:
      tags:
        - users
      summary: Login a user
      description: Login to the system
      requestBody:
        description: Information Login
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluY29tcGFueSIsImVtcGxveWVlTnVtYmVyIjoxMDAxLCJpYXQiOjE3MjQwNTY5NjIsImV4cCI6MTcyNDY2MTc2Mn0.Q1CsiKFGLOfjEd91550zgDBhIHV-whz4Ch1u8qAv5Ik
                  message:
                    type: string
                    example: Login successfully
        "400":
          description: Invalid username/password supplied
        "401":
          description: Unauthorized
  /users/register:
    post:
      tags:
        - users
      summary: Register a new user
      description: Register a new user with a username, password, and associated employee number.
      requestBody:
        description: User registration data.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Bad request - user already exists or invalid id
  /employees:
    get:
      tags:
        - employees
      summary: Get all employees
      description: Retrieve a list of all employees in the company.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Employee"
        "401":
          description: Unauthorized access
    post:
      tags:
        - employees
      summary: Create a new employee
      description: Create a new employee record.
      security:
        - bearerAuth: []
      requestBody:
        description: Employee data to be created.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                employeeNumber:
                  type: integer
                  example: 2025
                lastName:
                  type: string
                  example: Martinez
                firstName:
                  type: string
                  example: Sarah
                extension:
                  type: string
                  example: x8901
                email:
                  type: string
                  example: sarah.martinez@example.com
                officeCode:
                  type: string
                  example: 2
                reportsTo:
                  type: integer
                  example: 10034
                jobTitle:
                  type: string
                  example: Sales Rep
                role:
                  type: integer
                  example: 4
                customers:
                  type: array
                  items:
                    type: object
                    properties:
                      customerNumber:
                        type: integer
                        example: 2025
                      customerName:
                        type: string
                        example: Acme Corp
                      contactLastName:
                        type: string
                        example: Clark
                      contactFirstName:
                        type: string
                        example: Robert
                      phone:
                        type: string
                        example: +44-20-5555-0003
                      addressLine1:
                        type: string
                        example: 321 Elm St
                      addressLine2:
                        type: string
                        nullable: true
                        example: null
                      city:
                        type: string
                        example: London
                      state:
                        type: string
                        example: England
                      postalCode:
                        type: string
                        example: SW1A 1AA
                      country:
                        type: string
                        example: UK
                      salesRepEmployeeNumber:
                        type: integer
                        nullable: true
                        example: 123456
                      creditLimit:
                        type: number
                        format: float
                        nullable: true
                        example: 45000
      responses:
        "201":
          description: Employee created successfully
        "400":
          description: Bad request (e.g., invalid data supplied)
        "401":
          description: Unauthorized access
  /employees/{employeeId}:
    get:
      tags:
        - employees
      summary: Get an employee by ID
      description: Retrieve an employee record by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          description: ID of the employee to retrieve
          required: true
          schema:
            type: integer
            example: 1006
      responses:
        "200":
          description: Employee found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "401":
          description: Unauthorized access
        "404":
          description: Employee not found
    put:
      tags:
        - employees
      summary: Update an employee by ID
      description: Update an employee record by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          description: ID of the employee to update
          required: true
          schema:
            type: integer
            example: 1008
      requestBody:
        description: Employee data to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      responses:
        "200":
          description: Employee updated successfully
        "400":
          description: Bad request (e.g., invalid data supplied)
        "401":
          description: Unauthorized access
        "404":
          description: Employee not found
    delete:
      tags:
        - employees
      summary: Delete an employee by ID
      description: Delete an employee record by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          description: ID of the employee to delete
          required: true
          schema:
            type: integer
            example: 1006
      responses:
        "204":
          description: Employee deleted successfully
        "401":
          description: Unauthorized access
        "404":
          description: Employee not found
  /customers:
    get:
      tags:
        - customers
      summary: Get all customers
      description: Retrieve a list of all customers.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Customer"
        "401":
          description: Unauthorized access
    post:
      tags:
        - customers
      summary: Create a new customer
      description: Create a new customer record.
      security:
        - bearerAuth: []
      requestBody:
        description: Customer data to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "201":
          description: Customer created successfully
        "400":
          description: Bad request (e.g., invalid data supplied)
        "401":
          description: Unauthorized access
  /customers/{customerId}:
    get:
      tags:
        - customers
      summary: Get a customer by ID
      description: Retrieve a customer record by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: customerId
          in: path
          description: ID of the customer to retrieve
          required: true
          schema:
            type: integer
            example: 19951
      responses:
        "200":
          description: Customer found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "401":
          description: Unauthorized access
        "404":
          description: Customer not found
    put:
      tags:
        - customers
      summary: Update a customer by ID
      description: Update a customer record by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: customerId
          in: path
          description: ID of the customer to update
          required: true
          schema:
            type: integer
            example: 19951
      requestBody:
        description: Customer data to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "200":
          description: Customer updated successfully
        "400":
          description: Bad request (e.g., invalid data supplied)
        "401":
          description: Unauthorized access
        "404":
          description: Customer not found
    delete:
      tags:
        - customers
      summary: Delete a customer by ID
      description: Delete a customer record by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: customerId
          in: path
          description: ID of the customer to delete
          required: true
          schema:
            type: integer
            example: 19951
      responses:
        "204":
          description: Customer deleted successfully
        "401":
          description: Unauthorized access
        "404":
          description: Customer not found
  /logs:
    get:
      tags:
        - logs
      summary: Get all logs
      description: Retrieve a list of all logs.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: level
          schema:
            type: string
            example: "Info"
          description: Filter logs by level (e.g., Info, Warning, Error)
        - in: query
          name: user
          schema:
            type: string
            example: "presidentcompany"
          description: Filter logs by user
        - in: query
          name: startTime
          schema:
            type: string
            format: date-time
            example: "2024-08-01T00:00:00Z"
          description: Filter logs by start time (ISO 8601 format)
        - in: query
          name: endTime
          schema:
            type: string
            format: date-time
            example: "2024-08-31T23:59:59Z"
          description: Filter logs by end time (ISO 8601 format)
        - in: query
          name: content
          schema:
            type: string
            example:
          description: Filter logs by content (case-insensitive search)
      responses:
        "200":
          description: A list of logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Log"
        "401":
          description: Unauthorized access
  /logs/{id}/level:
    put:
      tags:
        - logs
      summary: Update log level
      description: Update the level of a log entry by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the log entry to update
          required: true
          schema:
            type: string
            example: "66caf8ddc1c379d96be4cb93"
      requestBody:
        description: New log level
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                level:
                  type: string
                  example: "Warning"
                  enum: ["Info", "Warning", "Error"]
      responses:
        "200":
          description: Log level updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
        "400":
          description: Bad request (e.g., invalid log level supplied)
        "401":
          description: Unauthorized access
        "404":
          description: Log entry not found

  /report/sales:
    get:
      tags:
        - report
      summary: Retrieve sales information
      description: Retrieve sales information for a specific office within a specified date range.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
            example: "2024-01-01"
          required: true
          description: Start date of the reporting period
        - in: query
          name: end_date
          schema:
            type: string
            format: date
            example: "2024-01-31"
          required: true
          description: End date of the reporting period
        - in: query
          name: officeCode
          schema:
            type: string
            example: "2"
          required: true
          description: Office code to filter the sales data
      responses:
        "200":
          description: Successful retrieval of sales data
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalRevenue:
                    type: number
                    format: float
                    example: 50000
                  officeCode:
                    type: string
                    example: "2"
                  productLineRevenue:
                    type: object
                    additionalProperties:
                      type: number
                      format: float
        "401":
          description: Unauthorized access
        "400":
          description: Bad request
        "404":
          description: Data not found
  /report/new-customers:
    get:
      tags:
        - report
      summary: Retrieve new customers based on an employee
      description: Retrieve details of new customers managed by a specific employee within a specified date range.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
            example: "2024-01-01"
          required: true
          description: Start date of the period to analyze new customers
        - in: query
          name: end_date
          schema:
            type: string
            format: date
            example: "2024-01-31"
          required: true
          description: End date of the period to analyze new customers
        - in: query
          name: employeeNumber
          schema:
            type: integer
            example: 1008
          required: true
          description: Employee number to filter the customers who were managed by this employee
      responses:
        "200":
          description: Successful retrieval of new customer data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Customer"
        "401":
          description: Unauthorized access
        "400":
          description: Bad request
        "404":
          description: Data not found
